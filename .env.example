# ===========================================
# Hajimi King Go v2.0 配置文件
# ===========================================

# ===========================================
# 🔑 必需配置
# ===========================================

# GitHub Personal Access Token (必需)
# 方式1: 单个Token (向后兼容)
GITHUB_TOKEN=ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# 方式2: 多个Token (推荐，支持负载均衡和故障转移)
# 用逗号分隔多个Token，系统会自动轮换使用
GITHUB_TOKENS=ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,ghp_yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,ghp_zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz

# GitHub API代理 (可选，如果需要通过代理访问)
GITHUB_PROXY=

# GitHub API基础URL (可选，默认使用官方API)
GITHUB_BASE_URL=https://api.github.com

# ===========================================
# 🎛️ 平台开关配置 (必需)
# ===========================================

# 全局平台开关
PLATFORM_GLOBAL_ENABLED=true

# 执行模式: all(全部平台) | single(单平台) | selected(选中平台)
PLATFORM_EXECUTION_MODE=all

# 各平台开关
PLATFORM_GEMINI_ENABLED=true
PLATFORM_OPENROUTER_ENABLED=false
PLATFORM_SILICONFLOW_ENABLED=false

# 选中平台列表 (当EXECUTION_MODE=selected时生效)
PLATFORM_SELECTED=gemini,openrouter

# ===========================================
# 🔑 API密钥配置 (已废弃)
# ===========================================
# 注意：系统现在使用发现的API密钥本身进行验证
# 不再需要预先配置API密钥！

# Google Gemini API密钥 (已废弃)
# GEMINI_API_KEY=AIzaSyxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# OpenRouter API密钥 (已废弃)
# OPENROUTER_API_KEY=sk-or-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# SiliconFlow API密钥 (已废弃)
# SILICONFLOW_API_KEY=sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# ===========================================
# ⚡ 性能配置 (推荐)
# ===========================================

# Worker Pool大小 (建议根据CPU核心数调整)
WORKER_POOL_SIZE=8

# 最大并发文件处理数
MAX_CONCURRENT_FILES=10

# 最大重试次数
MAX_RETRIES=3

# 重试延迟
RETRY_DELAY=5s

# 扫描间隔
SCAN_INTERVAL=1m

# ===========================================
# 💾 缓存配置 (推荐)
# ===========================================

# L1缓存最大大小
CACHE_L1_MAX_SIZE=1000

# L1缓存TTL
CACHE_L1_TTL=5m

# L2缓存TTL
CACHE_L2_TTL=1h

# L3缓存TTL (Redis)
CACHE_L3_TTL=24h

# 启用L3缓存 (需要Redis)
CACHE_ENABLE_L3=false

# Redis连接配置 (当CACHE_ENABLE_L3=true时)
REDIS_URL=redis://localhost:6379
REDIS_PASSWORD=
REDIS_DB=0

# ===========================================
# 📁 数据存储配置
# ===========================================

# 数据存储路径
DATA_PATH=./data

# 搜索查询文件路径
QUERIES_PATH=./queries.txt

# 检查点文件路径
CHECKPOINT_PATH=./checkpoint.json

# 文件前缀
VALID_KEY_PREFIX=keys_valid
VALID_KEY_DETAIL_PREFIX=keys_valid_detail
RATE_LIMITED_PREFIX=key_429

# ===========================================
# 🌐 Web界面配置
# ===========================================

# API服务器端口
API_SERVER_PORT=8080

# JWT密钥 (生产环境请修改)
JWT_SECRET=your-secure-jwt-secret-key

# 启用API服务器
API_ENABLED=true

# ===========================================
# 🔄 外部同步配置 (可选)
# ===========================================

# Gemini Balancer同步
BALANCER_ENABLED=false
BALANCER_URL=
BALANCER_TOKEN=

# GPT Load Balancer同步
GPT_LOAD_ENABLED=false
GPT_LOAD_URL=
GPT_LOAD_TOKEN=

# ===========================================
# 📊 日志配置
# ===========================================

# 日志级别: debug, info, warn, error
LOG_LEVEL=info

# 日志文件路径
LOG_FILE=logs/hajimi-king.log

# 日志最大大小 (MB)
LOG_MAX_SIZE=100

# 日志保留天数
LOG_MAX_AGE=30

# 日志最大备份数
LOG_MAX_BACKUPS=5

# ===========================================
# 🔍 检测配置 (高级)
# ===========================================

# 启用智能检测
SMART_DETECTION_ENABLED=true

# 检测置信度阈值 (0.0-1.0)
DETECTION_CONFIDENCE_THRESHOLD=0.7

# 启用上下文分析
CONTEXT_ANALYSIS_ENABLED=true

# 启用占位符过滤
PLACEHOLDER_FILTER_ENABLED=true

# ===========================================
# 📈 监控配置 (可选)
# ===========================================

# 启用指标收集
METRICS_ENABLED=true

# 指标端口
METRICS_PORT=9090

# 启用健康检查
HEALTH_CHECK_ENABLED=true

# ===========================================
# 🛡️ 安全配置
# ===========================================

# 启用请求限流
RATE_LIMIT_ENABLED=true

# 每分钟最大请求数
RATE_LIMIT_REQUESTS_PER_MINUTE=60

# 启用IP白名单 (可选)
IP_WHITELIST_ENABLED=false
IP_WHITELIST=127.0.0.1,::1

# ===========================================
# 🔧 调试配置
# ===========================================

# 启用调试模式
DEBUG_MODE=false

# 启用详细日志
VERBOSE_LOGGING=false

# 启用性能分析
PROFILING_ENABLED=false

# 性能分析端口
PROFILING_PORT=6060